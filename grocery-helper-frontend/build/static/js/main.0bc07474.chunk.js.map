{"version":3,"sources":["service/GroceryDataService.js","component/ListGroceriesComponent.jsx","component/GroceryHelperComponent.jsx","component/GroceryHelperApp.jsx","App.js","serviceWorker.js","index.js"],"names":["CATEGORY_API_URL","CATEGORY_API_URL_ALL","name","axios","get","id","delete","grocery","put","post","ListGroceriesComponent","props","state","groceries","message","deleteGroceryClicked","bind","updateGroceryClicked","addGroceryClicked","refreshGroceries","this","GroceryDataService","retrieveAllGroceries","then","response","setState","data","deleteGrocery","history","push","console","log","className","class","map","key","description","onClick","Component","GroceryHelperComponent","match","params","onSubmit","validate","retrieveGrocery","values","errors","length","category","targetDate","createGrocery","updateGrocery","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","type","disabled","GroceryHelperApp","path","exact","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0bc07474.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst CATEGORY = 'Beverages'\nconst GROCERY_API_URL = 'http://localhost:9000'\nconst CATEGORY_API_URL = `${GROCERY_API_URL}/grocery-helpers/${CATEGORY}`\nconst CATEGORY_API_URL_ALL = `${GROCERY_API_URL}/grocery-helpers/groceries`\n\nclass GroceryDataService {\n\n    retrieveAllGroceries(name) {\n        //console.log('executed service')\n        return axios.get(`${CATEGORY_API_URL_ALL}`);\n    }\n\n    retrieveGrocery(name, id) {\n        //console.log('executed service')\n        return axios.get(`${CATEGORY_API_URL}/groceries/${id}`);\n    }\n\n    deleteGrocery(name, id) {\n        //console.log('executed service')\n        return axios.delete(`${CATEGORY_API_URL}/groceries/${id}`);\n    }\n\n    updateGrocery(name, id, grocery) {\n        //console.log('executed service')\n        return axios.put(`${CATEGORY_API_URL}/groceries/${id}`, grocery);\n    }\n\n    createGrocery(name, grocery) {\n        //console.log('executed service')\n        return axios.post(`${CATEGORY_API_URL}/groceries/`, grocery);\n    }\n}\n\nexport default new GroceryDataService()","import React, { Component } from 'react'\nimport GroceryDataService from '../service/GroceryDataService';\n\nconst CATEGORY = 'Beverages'\n\nclass ListGroceriesComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            groceries: [],\n            message: null\n        }\n        this.deleteGroceryClicked = this.deleteGroceryClicked.bind(this)\n        this.updateGroceryClicked = this.updateGroceryClicked.bind(this)\n        this.addGroceryClicked = this.addGroceryClicked.bind(this)\n        this.refreshGroceries = this.refreshGroceries.bind(this)\n    }\n\n    componentDidMount() {\n        this.refreshGroceries();\n    }\n\n    refreshGroceries() {\n        GroceryDataService.retrieveAllGroceries(CATEGORY)//HARDCODED\n            .then(\n                response => {\n                    //console.log(response);\n                    this.setState({ groceries: response.data })\n                }\n            )\n    }\n\n    deleteGroceryClicked(id) {\n        GroceryDataService.deleteGrocery(CATEGORY, id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of grocery ${id} Successful` })\n                    this.refreshGroceries()\n                }\n            )\n\n    }\n\n    addGroceryClicked() {\n        this.props.history.push(`/groceries/-1`)\n    }\n\n    updateGroceryClicked(id) {\n        console.log('update ' + id)\n        this.props.history.push(`/groceries/${id}`)\n    }\n\n    render() {\n        console.log('render')\n        return (\n            <div className=\"container\">\n                <h3>All Groceries</h3>\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Grocery Id</th>\n                                <th>Grocery Description</th>\n                                <th>Update Grocery Item</th>\n                                <th>Delete Grocery Item</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.groceries.map(\n                                    grocery =>\n                                        <tr key={grocery.id}>\n                                            <td>{grocery.id}</td>\n                                            <td>{grocery.description}</td>\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateGroceryClicked(grocery.id)}>Update</button></td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteGroceryClicked(grocery.id)}>Delete</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addGroceryClicked}>Add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListGroceriesComponent","import React, { Component } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport GroceryDataService from '../service/GroceryDataService';\n\nconst CATEGORY = 'Beverages'\n\nclass GroceryHelperComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            description: ''\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n    }\n\n    componentDidMount() {\n\n        console.log(this.state.id)\n\n        // eslint-disable-next-line\n        if (this.state.id == -1) {\n            return\n        }\n\n        GroceryDataService.retrieveGrocery(CATEGORY, this.state.id)\n            .then(response => this.setState({\n                description: response.data.description\n            }))\n    }\n\n    validate(values) {\n        let errors = {}\n        if (!values.description) {\n            errors.description = 'Enter a Description'\n        } else if (values.description.length < 5) {\n            errors.description = 'Enter atleast 5 Characters in Description'\n        }\n\n        return errors\n\n    }\n\n    onSubmit(values) {\n        let categoryname = CATEGORY\n\n        let grocery = {\n            id: this.state.id,\n            category: this.state.category,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n\n        if (this.state.id === -1) {\n            GroceryDataService.createGrocery(categoryname, grocery)\n                .then(() => this.props.history.push('/groceries'))\n        } else {\n            GroceryDataService.updateGrocery(categoryname, this.state.id, grocery)\n                .then(() => this.props.history.push('/groceries'))\n        }\n\n        console.log(values);\n    }\n\n    render() {\n\n        let { description, category, id } = this.state\n\n        return (\n            <div>\n                <h3>Grocery</h3>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ id, category, description }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Grocery Helper Id</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"id\" disabled />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Grocery Category</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"category\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Grocery Helper Description</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GroceryHelperComponent","import React, { Component } from 'react';\nimport ListGroceriesComponent from './ListGroceriesComponent';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport GroceryHelperComponent from './GroceryHelperComponent';\n\nclass GroceryHelperApp extends Component {\n    render() {\n        return (\n            <Router>\n                <>\n                    <h1>Grocery Helper Application</h1>\n                    <Switch>\n                        <Route path=\"/\" exact component={ListGroceriesComponent} />\n                        <Route path=\"/groceries\" exact component={ListGroceriesComponent} />\n                        <Route path=\"/groceries/:id\" component={GroceryHelperComponent} />\n                    </Switch>\n                </>\n            </Router>\n        )\n    }\n}\n\nexport default GroceryHelperApp","import React, { Component } from 'react';\nimport './App.css';\nimport GroceryHelperApp from './component/GroceryHelperApp';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <GroceryHelperApp />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}